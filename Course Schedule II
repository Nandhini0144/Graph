class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int r=prerequisites.length;
        int[] res=new int[numCourses];
        List<Integer>[] adj=new List[numCourses];
        int[] inDegree=new int[numCourses];
        int ind=0;
        int[] result=new int[0];
        for(int[] ar:prerequisites)
        {
            if(adj[ar[0]]==null)
                adj[ar[0]]=new ArrayList<>();
            adj[ar[0]].add(ar[1]);
            inDegree[ar[1]]++;
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<numCourses;i++)
        {
            if(inDegree[i]==0)
            {
                q.offer(i);
            }
        }
        if(q.isEmpty()==true)
            return result;
        while(!q.isEmpty())
        {
            int st=q.peek();
            int s;
            if(adj[st]==null)
                s=0;
            else
            s=adj[st].size();
            for(int i=0;i<s;i++)
            {
                inDegree[adj[st].get(i)]--;
                if(inDegree[adj[st].get(i)]==0)
                    q.offer(adj[st].get(i));
            }
            res[ind]=q.peek();
            ind++;
            q.remove();
        }
        if(ind==numCourses)
        {
            for(int i=0;i<numCourses/2;i++)
            {
                int t=res[i];
                res[i]=res[numCourses-1-i];
                res[numCourses-1-i]=t;
                
            }
            return res;
        }
        return result;
            
    }
}
